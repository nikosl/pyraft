# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import raft_pb2 as raft__pb2


class raftStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.RequestVote = channel.unary_unary(
        '/raft/RequestVote',
        request_serializer=raft__pb2.RequestVoteReq.SerializeToString,
        response_deserializer=raft__pb2.RequestVoteRes.FromString,
        )
    self.AppendEntries = channel.unary_stream(
        '/raft/AppendEntries',
        request_serializer=raft__pb2.AppendEntriesReq.SerializeToString,
        response_deserializer=raft__pb2.AppendEntriesRes.FromString,
        )


class raftServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def RequestVote(self, request, context):
    """Invoked by candidates to gather votes.
    1. If term > currentTerm, currentTerm <- term (step down if leader or candidate)
    2. If term == currentTerm, votedForis null or candidateId, and candidate's log is at least as complete as local log, grant vote and reset election timeout
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AppendEntries(self, request, context):
    """Invoked by leader to replicate log entries and discover inconsistencies; also used as heartbeat
    1.Return if term < currentTerm
    2.If term > currentTerm, currentTerm <- term
    3.If candidate or leader, step down
    4.Reset election timeout
    5.Return failure if log doesn't contain an entry at prevLogIndex
    whose term matches prevLogTerm
    6.If existing entries conflict with new entries, delete all existing entries starting with first conflicting entry
    7.Append any new entries not already in the log
    8.Advance state machine with newly committed entries
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_raftServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'RequestVote': grpc.unary_unary_rpc_method_handler(
          servicer.RequestVote,
          request_deserializer=raft__pb2.RequestVoteReq.FromString,
          response_serializer=raft__pb2.RequestVoteRes.SerializeToString,
      ),
      'AppendEntries': grpc.unary_stream_rpc_method_handler(
          servicer.AppendEntries,
          request_deserializer=raft__pb2.AppendEntriesReq.FromString,
          response_serializer=raft__pb2.AppendEntriesRes.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'raft', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
